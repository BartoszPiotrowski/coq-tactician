DECLARE PLUGIN "tactician_ltac1_record_plugin"

{

open Ltac_plugin
open Ltacrecord

open Pcoq
open G_ltac
open Tacarg
open Vernacextend

let tactician_mode = Entry.create "vernac:tactician_ltac1_mode"

let classic_proof_mode = Pvernac.register_proof_mode "Tactician Ltac1" tactician_mode

let vernac_solve ~pstate n info tcom b id =
  let open Goal_select in
  let skip = pre_vernac_solve pstate id in
  if skip then pstate else (
      let pstate, status = Proof_global.map_fold_proof_endline (fun etac p ->
          let with_end_tac = if b then Some etac else None in
          let global = match n with SelectAll | SelectList _ -> true | _ -> false in
          let info = Option.append info !print_info_trace in
          let (p,status) =
              Pfedit.solve n info (hide_interp_t global tcom None Ltacrecord.recorder) ?with_end_tac p
          in
          (* in case a strict subtree was completed,
             go back to the top of the prooftree *)
          let p = Proof.maximal_unfocus Vernacentries.command_focus p in
          p,status) pstate in
      if not status then Feedback.feedback Feedback.AddedAxiom;
      just_classified := false;
      pstate
  )

let pr_ltac_use_default b =
  if (snd b) then (* Bug: a space is inserted before "..." *) Pp.str ".." else Pp.mt ()

}

GRAMMAR EXTEND Gram
  GLOBAL: tactician_mode;

  tactician_mode:
    [ [ g = OPT toplevel_selector; tac = G_vernac.query_command -> { tac g }
      | g = OPT toplevel_selector; "{" -> { Vernacexpr.VernacSubproof g } ] ]
  ;
  END

(* TODO: A truly evil memoization trick is happening here, remove *)
VERNAC ARGUMENT EXTEND ltac_use_default_hack PRINTED BY { pr_ltac_use_default }
| [ "." ] -> { (Random.int64 (Int64.max_int), false) }
| [ "..." ] -> { (Random.int64 (Int64.max_int), true) }
END

VERNAC { tactician_mode } EXTEND VernacSolveTactician STATE proof
| [ ltac_selector_opt(g) ltac_info_opt(n) tactic(t) ltac_use_default_hack(def) ] =>
    { (* TODO: Enormously ugly hack, remove! *)
    just_classified := true;
    VtSideff ([], VtLater)
    } -> {
    let g = Option.default (Goal_select.get_default_goal_selector ()) g in
    vernac_solve g n t (snd def) (fst def)
  }
END
